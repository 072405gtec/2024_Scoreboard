
test_Matrixdriver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000049e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000042a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  00800100  00800100  0000049e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000049e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001337  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b44  00000000  00000000  00001933  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000956  00000000  00000000  00002477  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000020c  00000000  00000000  00002dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000648  00000000  00000000  00002fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000864  00000000  00000000  00003624  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00003e88  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	70 c0       	rjmp	.+224    	; 0xe6 <__bad_interrupt>
   6:	00 00       	nop
   8:	6e c0       	rjmp	.+220    	; 0xe6 <__bad_interrupt>
   a:	00 00       	nop
   c:	6c c0       	rjmp	.+216    	; 0xe6 <__bad_interrupt>
   e:	00 00       	nop
  10:	6a c0       	rjmp	.+212    	; 0xe6 <__bad_interrupt>
  12:	00 00       	nop
  14:	68 c0       	rjmp	.+208    	; 0xe6 <__bad_interrupt>
  16:	00 00       	nop
  18:	66 c0       	rjmp	.+204    	; 0xe6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	64 c0       	rjmp	.+200    	; 0xe6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	62 c0       	rjmp	.+196    	; 0xe6 <__bad_interrupt>
  22:	00 00       	nop
  24:	60 c0       	rjmp	.+192    	; 0xe6 <__bad_interrupt>
  26:	00 00       	nop
  28:	5e c0       	rjmp	.+188    	; 0xe6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5c c0       	rjmp	.+184    	; 0xe6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5a c0       	rjmp	.+180    	; 0xe6 <__bad_interrupt>
  32:	00 00       	nop
  34:	58 c0       	rjmp	.+176    	; 0xe6 <__bad_interrupt>
  36:	00 00       	nop
  38:	56 c0       	rjmp	.+172    	; 0xe6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	54 c0       	rjmp	.+168    	; 0xe6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	52 c0       	rjmp	.+164    	; 0xe6 <__bad_interrupt>
  42:	00 00       	nop
  44:	50 c0       	rjmp	.+160    	; 0xe6 <__bad_interrupt>
  46:	00 00       	nop
  48:	4e c0       	rjmp	.+156    	; 0xe6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4c c0       	rjmp	.+152    	; 0xe6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4a c0       	rjmp	.+148    	; 0xe6 <__bad_interrupt>
  52:	00 00       	nop
  54:	48 c0       	rjmp	.+144    	; 0xe6 <__bad_interrupt>
  56:	00 00       	nop
  58:	46 c0       	rjmp	.+140    	; 0xe6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	44 c0       	rjmp	.+136    	; 0xe6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	42 c0       	rjmp	.+132    	; 0xe6 <__bad_interrupt>
  62:	00 00       	nop
  64:	40 c0       	rjmp	.+128    	; 0xe6 <__bad_interrupt>
  66:	00 00       	nop
  68:	3e c0       	rjmp	.+124    	; 0xe6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3c c0       	rjmp	.+120    	; 0xe6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3a c0       	rjmp	.+116    	; 0xe6 <__bad_interrupt>
  72:	00 00       	nop
  74:	38 c0       	rjmp	.+112    	; 0xe6 <__bad_interrupt>
  76:	00 00       	nop
  78:	36 c0       	rjmp	.+108    	; 0xe6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	34 c0       	rjmp	.+104    	; 0xe6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	32 c0       	rjmp	.+100    	; 0xe6 <__bad_interrupt>
  82:	00 00       	nop
  84:	30 c0       	rjmp	.+96     	; 0xe6 <__bad_interrupt>
  86:	00 00       	nop
  88:	2e c0       	rjmp	.+92     	; 0xe6 <__bad_interrupt>
	...

0000008c <__trampolines_end>:
  8c:	00 7f       	andi	r16, 0xF0	; 240
  8e:	7f 08       	sbc	r7, r15
  90:	08 7f       	andi	r16, 0xF8	; 248
  92:	7f 00       	.word	0x007f	; ????
  94:	00 7f       	andi	r16, 0xF0	; 240
  96:	7f 30       	cpi	r23, 0x0F	; 15
  98:	18 30       	cpi	r17, 0x08	; 8
  9a:	7f 7f       	andi	r23, 0xFF	; 255
  9c:	00 3e       	cpi	r16, 0xE0	; 224
  9e:	7f 41       	sbci	r23, 0x1F	; 31
  a0:	45 67       	ori	r20, 0x75	; 117
  a2:	26 00       	.word	0x0026	; ????
  a4:	00 32       	cpi	r16, 0x20	; 32
  a6:	7b 49       	sbci	r23, 0x9B	; 155
  a8:	49 6f       	ori	r20, 0xF9	; 249
  aa:	26 00       	.word	0x0026	; ????

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d0 e1       	ldi	r29, 0x10	; 16
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ea e2       	ldi	r30, 0x2A	; 42
  c0:	f4 e0       	ldi	r31, 0x04	; 4
  c2:	00 e0       	ldi	r16, 0x00	; 0
  c4:	0b bf       	out	0x3b, r16	; 59
  c6:	02 c0       	rjmp	.+4      	; 0xcc <__do_copy_data+0x14>
  c8:	07 90       	elpm	r0, Z+
  ca:	0d 92       	st	X+, r0
  cc:	a0 30       	cpi	r26, 0x00	; 0
  ce:	b1 07       	cpc	r27, r17
  d0:	d9 f7       	brne	.-10     	; 0xc8 <__do_copy_data+0x10>

000000d2 <__do_clear_bss>:
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	a0 e0       	ldi	r26, 0x00	; 0
  d6:	b1 e0       	ldi	r27, 0x01	; 1
  d8:	01 c0       	rjmp	.+2      	; 0xdc <.do_clear_bss_start>

000000da <.do_clear_bss_loop>:
  da:	1d 92       	st	X+, r1

000000dc <.do_clear_bss_start>:
  dc:	a0 34       	cpi	r26, 0x40	; 64
  de:	b2 07       	cpc	r27, r18
  e0:	e1 f7       	brne	.-8      	; 0xda <.do_clear_bss_loop>
  e2:	23 d0       	rcall	.+70     	; 0x12a <main>
  e4:	a0 c1       	rjmp	.+832    	; 0x426 <_exit>

000000e6 <__bad_interrupt>:
  e6:	8c cf       	rjmp	.-232    	; 0x0 <__vectors>

000000e8 <pgm_read_64>:
volatile uint8_t minutes = 0;
volatile uint8_t seconds = 0;


uint64_t pgm_read_64( void *ptr )
{
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	cd b7       	in	r28, 0x3d	; 61
  ee:	de b7       	in	r29, 0x3e	; 62
  f0:	28 97       	sbiw	r28, 0x08	; 8
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	f8 94       	cli
  f6:	de bf       	out	0x3e, r29	; 62
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	cd bf       	out	0x3d, r28	; 61
	uint64_t result;
	memcpy_P( &result, ptr, sizeof(uint64_t) );
  fc:	48 e0       	ldi	r20, 0x08	; 8
  fe:	50 e0       	ldi	r21, 0x00	; 0
 100:	bc 01       	movw	r22, r24
 102:	ce 01       	movw	r24, r28
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	86 d1       	rcall	.+780    	; 0x414 <memcpy_P>
	return result;
 108:	29 81       	ldd	r18, Y+1	; 0x01
 10a:	3a 81       	ldd	r19, Y+2	; 0x02
 10c:	4b 81       	ldd	r20, Y+3	; 0x03
 10e:	5c 81       	ldd	r21, Y+4	; 0x04
 110:	6d 81       	ldd	r22, Y+5	; 0x05
 112:	7e 81       	ldd	r23, Y+6	; 0x06
}
 114:	8f 81       	ldd	r24, Y+7	; 0x07
 116:	98 85       	ldd	r25, Y+8	; 0x08
 118:	28 96       	adiw	r28, 0x08	; 8
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	f8 94       	cli
 11e:	de bf       	out	0x3e, r29	; 62
 120:	0f be       	out	0x3f, r0	; 63
 122:	cd bf       	out	0x3d, r28	; 61
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <main>:

int main(void)
{
	MAX7219_MatrixInit();
 12a:	56 d0       	rcall	.+172    	; 0x1d8 <MAX7219_MatrixInit>
	MAX7219_MatrixUpdate();
 12c:	b5 d0       	rcall	.+362    	; 0x298 <MAX7219_MatrixUpdate>
 12e:	8c e8       	ldi	r24, 0x8C	; 140
	
	while (1)
	{
		
		MAX7219_MatrixSetRow64(0, pgm_read_64(&string[0]));
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	da df       	rcall	.-76     	; 0xe8 <pgm_read_64>
 134:	02 2f       	mov	r16, r18
 136:	13 2f       	mov	r17, r19
 138:	24 2f       	mov	r18, r20
 13a:	35 2f       	mov	r19, r21
 13c:	46 2f       	mov	r20, r22
 13e:	57 2f       	mov	r21, r23
 140:	68 2f       	mov	r22, r24
 142:	79 2f       	mov	r23, r25
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	68 d0       	rcall	.+208    	; 0x218 <MAX7219_MatrixSetRow64>
 148:	84 e9       	ldi	r24, 0x94	; 148
		MAX7219_MatrixSetRow64(1, pgm_read_64(&string[1]));
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	cd df       	rcall	.-102    	; 0xe8 <pgm_read_64>
 14e:	02 2f       	mov	r16, r18
 150:	13 2f       	mov	r17, r19
 152:	24 2f       	mov	r18, r20
 154:	35 2f       	mov	r19, r21
 156:	46 2f       	mov	r20, r22
 158:	57 2f       	mov	r21, r23
 15a:	68 2f       	mov	r22, r24
 15c:	79 2f       	mov	r23, r25
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	5b d0       	rcall	.+182    	; 0x218 <MAX7219_MatrixSetRow64>
 162:	8c e9       	ldi	r24, 0x9C	; 156
		MAX7219_MatrixSetRow64(2, pgm_read_64(&string[2]));
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	c0 df       	rcall	.-128    	; 0xe8 <pgm_read_64>
 168:	02 2f       	mov	r16, r18
 16a:	13 2f       	mov	r17, r19
 16c:	24 2f       	mov	r18, r20
 16e:	35 2f       	mov	r19, r21
 170:	46 2f       	mov	r20, r22
 172:	57 2f       	mov	r21, r23
 174:	68 2f       	mov	r22, r24
 176:	79 2f       	mov	r23, r25
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	4e d0       	rcall	.+156    	; 0x218 <MAX7219_MatrixSetRow64>
 17c:	84 ea       	ldi	r24, 0xA4	; 164
		MAX7219_MatrixSetRow64(3, pgm_read_64(&string[3]));
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	b3 df       	rcall	.-154    	; 0xe8 <pgm_read_64>
 182:	02 2f       	mov	r16, r18
 184:	13 2f       	mov	r17, r19
 186:	24 2f       	mov	r18, r20
 188:	35 2f       	mov	r19, r21
 18a:	46 2f       	mov	r20, r22
 18c:	57 2f       	mov	r21, r23
 18e:	68 2f       	mov	r22, r24
 190:	79 2f       	mov	r23, r25
 192:	83 e0       	ldi	r24, 0x03	; 3
 194:	41 d0       	rcall	.+130    	; 0x218 <MAX7219_MatrixSetRow64>
 196:	80 d0       	rcall	.+256    	; 0x298 <MAX7219_MatrixUpdate>
		MAX7219_MatrixUpdate();
 198:	2f ef       	ldi	r18, 0xFF	; 255
 19a:	8f e4       	ldi	r24, 0x4F	; 79
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	93 ec       	ldi	r25, 0xC3	; 195
 19e:	21 50       	subi	r18, 0x01	; 1
 1a0:	80 40       	sbci	r24, 0x00	; 0
 1a2:	90 40       	sbci	r25, 0x00	; 0
 1a4:	e1 f7       	brne	.-8      	; 0x19e <main+0x74>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0x7e>
 1a8:	00 00       	nop
 1aa:	c1 cf       	rjmp	.-126    	; 0x12e <main+0x4>

000001ac <MAX7219_MatrixClear>:
 1ac:	20 e0       	ldi	r18, 0x00	; 0
 1ae:	30 e0       	ldi	r19, 0x00	; 0
		lsbD0 = ((FrameBuffer[0][i] & 0x01) << 7);
		FrameBuffer[0][i] = FrameBuffer[0][i] >> 1;
		FrameBuffer[0][i] |= lsbD1;
		FrameBuffer[3][i] |= lsbD0;
	}
}
 1b0:	0f c0       	rjmp	.+30     	; 0x1d0 <MAX7219_MatrixClear+0x24>
 1b2:	e8 2f       	mov	r30, r24
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	ee 0f       	add	r30, r30
 1b8:	ff 1f       	adc	r31, r31
 1ba:	ee 0f       	add	r30, r30
 1bc:	ff 1f       	adc	r31, r31
 1be:	ee 0f       	add	r30, r30
 1c0:	ff 1f       	adc	r31, r31
 1c2:	e0 50       	subi	r30, 0x00	; 0
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	e2 0f       	add	r30, r18
 1c8:	f3 1f       	adc	r31, r19
 1ca:	10 82       	st	Z, r1
 1cc:	2f 5f       	subi	r18, 0xFF	; 255
 1ce:	3f 4f       	sbci	r19, 0xFF	; 255
 1d0:	28 30       	cpi	r18, 0x08	; 8
 1d2:	31 05       	cpc	r19, r1
 1d4:	74 f3       	brlt	.-36     	; 0x1b2 <MAX7219_MatrixClear+0x6>
 1d6:	08 95       	ret

000001d8 <MAX7219_MatrixInit>:
 1d8:	cf 93       	push	r28
 1da:	df 93       	push	r29
 1dc:	90 d0       	rcall	.+288    	; 0x2fe <MAX7219_Init>
 1de:	c0 e0       	ldi	r28, 0x00	; 0
 1e0:	d0 e0       	ldi	r29, 0x00	; 0
 1e2:	14 c0       	rjmp	.+40     	; 0x20c <MAX7219_MatrixInit+0x34>
 1e4:	8c 2f       	mov	r24, r28
 1e6:	e2 df       	rcall	.-60     	; 0x1ac <MAX7219_MatrixClear>
 1e8:	61 e0       	ldi	r22, 0x01	; 1
 1ea:	8c 2f       	mov	r24, r28
 1ec:	e3 d0       	rcall	.+454    	; 0x3b4 <MAX7219_ShutDown>
 1ee:	60 e0       	ldi	r22, 0x00	; 0
 1f0:	8c 2f       	mov	r24, r28
 1f2:	e9 d0       	rcall	.+466    	; 0x3c6 <MAX7219_Test>
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	8c 2f       	mov	r24, r28
 1f8:	c5 d0       	rcall	.+394    	; 0x384 <MAX7219_Decode>
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	8c 2f       	mov	r24, r28
 1fe:	c8 d0       	rcall	.+400    	; 0x390 <MAX7219_Intensity>
 200:	67 e0       	ldi	r22, 0x07	; 7
 202:	8c 2f       	mov	r24, r28
 204:	ce d0       	rcall	.+412    	; 0x3a2 <MAX7219_ScanLimit>
 206:	8c 2f       	mov	r24, r28
 208:	d1 df       	rcall	.-94     	; 0x1ac <MAX7219_MatrixClear>
 20a:	21 96       	adiw	r28, 0x01	; 1
 20c:	c8 30       	cpi	r28, 0x08	; 8
 20e:	d1 05       	cpc	r29, r1
 210:	4c f3       	brlt	.-46     	; 0x1e4 <MAX7219_MatrixInit+0xc>
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <MAX7219_MatrixSetRow64>:
 218:	bf 92       	push	r11
 21a:	cf 92       	push	r12
 21c:	df 92       	push	r13
 21e:	ef 92       	push	r14
 220:	ff 92       	push	r15
 222:	0f 93       	push	r16
 224:	1f 93       	push	r17
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	b8 2e       	mov	r11, r24
 22c:	c2 2e       	mov	r12, r18
 22e:	d3 2e       	mov	r13, r19
 230:	e4 2e       	mov	r14, r20
 232:	f5 2e       	mov	r15, r21
 234:	86 2f       	mov	r24, r22
 236:	97 2f       	mov	r25, r23
 238:	c0 e0       	ldi	r28, 0x00	; 0
 23a:	d0 e0       	ldi	r29, 0x00	; 0
 23c:	20 c0       	rjmp	.+64     	; 0x27e <MAX7219_MatrixSetRow64+0x66>
 23e:	eb 2d       	mov	r30, r11
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	a7 e0       	ldi	r26, 0x07	; 7
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	ac 1b       	sub	r26, r28
 248:	bd 0b       	sbc	r27, r29
 24a:	ee 0f       	add	r30, r30
 24c:	ff 1f       	adc	r31, r31
 24e:	ee 0f       	add	r30, r30
 250:	ff 1f       	adc	r31, r31
 252:	ee 0f       	add	r30, r30
 254:	ff 1f       	adc	r31, r31
 256:	e0 50       	subi	r30, 0x00	; 0
 258:	ff 4f       	sbci	r31, 0xFF	; 255
 25a:	ea 0f       	add	r30, r26
 25c:	fb 1f       	adc	r31, r27
 25e:	00 83       	st	Z, r16
 260:	20 2f       	mov	r18, r16
 262:	31 2f       	mov	r19, r17
 264:	4c 2d       	mov	r20, r12
 266:	5d 2d       	mov	r21, r13
 268:	6e 2d       	mov	r22, r14
 26a:	7f 2d       	mov	r23, r15
 26c:	08 e0       	ldi	r16, 0x08	; 8
 26e:	b6 d0       	rcall	.+364    	; 0x3dc <__lshrdi3>
 270:	02 2f       	mov	r16, r18
 272:	13 2f       	mov	r17, r19
 274:	c4 2e       	mov	r12, r20
 276:	d5 2e       	mov	r13, r21
 278:	e6 2e       	mov	r14, r22
 27a:	f7 2e       	mov	r15, r23
 27c:	21 96       	adiw	r28, 0x01	; 1
 27e:	c8 30       	cpi	r28, 0x08	; 8
 280:	d1 05       	cpc	r29, r1
 282:	ec f2       	brlt	.-70     	; 0x23e <MAX7219_MatrixSetRow64+0x26>
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
 288:	1f 91       	pop	r17
 28a:	0f 91       	pop	r16
 28c:	ff 90       	pop	r15
 28e:	ef 90       	pop	r14
 290:	df 90       	pop	r13
 292:	cf 90       	pop	r12
 294:	bf 90       	pop	r11
 296:	08 95       	ret

00000298 <MAX7219_MatrixUpdate>:

void MAX7219_MatrixUpdate()
{
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
	for(int index = 0; index < MAX7219_IC_NUM; index++)
 2a0:	00 e0       	ldi	r16, 0x00	; 0
 2a2:	10 e0       	ldi	r17, 0x00	; 0
 2a4:	18 c0       	rjmp	.+48     	; 0x2d6 <MAX7219_MatrixUpdate+0x3e>
	{
		for(int digit = 0; digit < 8; digit++)
		{
			uint8_t row = FrameBuffer[index][digit];
 2a6:	f8 01       	movw	r30, r16
 2a8:	ee 0f       	add	r30, r30
 2aa:	ff 1f       	adc	r31, r31
 2ac:	ee 0f       	add	r30, r30
 2ae:	ff 1f       	adc	r31, r31
 2b0:	ee 0f       	add	r30, r30
 2b2:	ff 1f       	adc	r31, r31
 2b4:	e0 50       	subi	r30, 0x00	; 0
 2b6:	ff 4f       	sbci	r31, 0xFF	; 255
 2b8:	ec 0f       	add	r30, r28
 2ba:	fd 1f       	adc	r31, r29
 2bc:	40 81       	ld	r20, Z
			MAX7219_Digit(index, digit, row);
 2be:	6c 2f       	mov	r22, r28
 2c0:	80 2f       	mov	r24, r16
 2c2:	59 d0       	rcall	.+178    	; 0x376 <MAX7219_Digit>

void MAX7219_MatrixUpdate()
{
	for(int index = 0; index < MAX7219_IC_NUM; index++)
	{
		for(int digit = 0; digit < 8; digit++)
 2c4:	21 96       	adiw	r28, 0x01	; 1
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <MAX7219_MatrixUpdate+0x34>
 2c8:	c0 e0       	ldi	r28, 0x00	; 0
 2ca:	d0 e0       	ldi	r29, 0x00	; 0
 2cc:	c8 30       	cpi	r28, 0x08	; 8
 2ce:	d1 05       	cpc	r29, r1
 2d0:	54 f3       	brlt	.-44     	; 0x2a6 <MAX7219_MatrixUpdate+0xe>
	}
}

void MAX7219_MatrixUpdate()
{
	for(int index = 0; index < MAX7219_IC_NUM; index++)
 2d2:	0f 5f       	subi	r16, 0xFF	; 255
 2d4:	1f 4f       	sbci	r17, 0xFF	; 255
 2d6:	08 30       	cpi	r16, 0x08	; 8
 2d8:	11 05       	cpc	r17, r1
 2da:	b4 f3       	brlt	.-20     	; 0x2c8 <MAX7219_MatrixUpdate+0x30>
		{
			uint8_t row = FrameBuffer[index][digit];
			MAX7219_Digit(index, digit, row);
		}
	}
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	1f 91       	pop	r17
 2e2:	0f 91       	pop	r16
 2e4:	08 95       	ret

000002e6 <MAX7219_Select>:
	SPCR |= (_BV(MSTR) | _BV(SPE));
}

static void MAX7219_Select()
{
	MAX7219_PORT &= ~_BV(MAX7219_LOAD);
 2e6:	88 b3       	in	r24, 0x18	; 24
 2e8:	8e 7f       	andi	r24, 0xFE	; 254
 2ea:	88 bb       	out	0x18, r24	; 24
 2ec:	08 95       	ret

000002ee <MAX7219_Deselect>:
}

static void MAX7219_Deselect()
{
	MAX7219_PORT |= _BV(MAX7219_LOAD);
 2ee:	88 b3       	in	r24, 0x18	; 24
 2f0:	81 60       	ori	r24, 0x01	; 1
 2f2:	88 bb       	out	0x18, r24	; 24
 2f4:	08 95       	ret

000002f6 <MAX7219_Tx>:
}

static void MAX7219_Tx(uint8_t data)
{
	SPDR = data;
 2f6:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
 2f8:	77 9b       	sbis	0x0e, 7	; 14
 2fa:	fe cf       	rjmp	.-4      	; 0x2f8 <MAX7219_Tx+0x2>
}
 2fc:	08 95       	ret

000002fe <MAX7219_Init>:
static void MAX7219_Tx(uint8_t data);

void MAX7219_Init()
{
	/* SPI MOSI, SCK, SS Output */
	MAX7219_DDR |= _BV(MAX7219_DIN) | _BV(MAX7219_CLK) | _BV(MAX7219_LOAD);
 2fe:	87 b3       	in	r24, 0x17	; 23
 300:	87 60       	ori	r24, 0x07	; 7
 302:	87 bb       	out	0x17, r24	; 23
	
	/* Deselect SS */
	MAX7219_Deselect();
 304:	f4 df       	rcall	.-24     	; 0x2ee <MAX7219_Deselect>
	
	/* MISO Input + Pullup */
	MAX7219_DDR &= ~_BV(MAX7219_MISO);
 306:	87 b3       	in	r24, 0x17	; 23
 308:	8f 77       	andi	r24, 0x7F	; 127
 30a:	87 bb       	out	0x17, r24	; 23
	MAX7219_PORT |= _BV(MAX7219_MISO);
 30c:	88 b3       	in	r24, 0x18	; 24
 30e:	80 68       	ori	r24, 0x80	; 128
 310:	88 bb       	out	0x18, r24	; 24
	
	/* Master mode + Enable, F_CPU/4 =  4MHz */
	SPCR |= (_BV(MSTR) | _BV(SPE));
 312:	8d b1       	in	r24, 0x0d	; 13
 314:	80 65       	ori	r24, 0x50	; 80
 316:	8d b9       	out	0x0d, r24	; 13
 318:	08 95       	ret

0000031a <MAX7219_Write>:
	SPDR = data;
	loop_until_bit_is_set(SPSR, SPIF);
}

void MAX7219_Write(uint8_t index, uint8_t reg, uint8_t data)
{
 31a:	ef 92       	push	r14
 31c:	ff 92       	push	r15
 31e:	0f 93       	push	r16
 320:	1f 93       	push	r17
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
	if(index >= MAX7219_IC_NUM) return;
 326:	88 30       	cpi	r24, 0x08	; 8
 328:	f8 f4       	brcc	.+62     	; 0x368 <MAX7219_Write+0x4e>
 32a:	f4 2e       	mov	r15, r20
 32c:	e6 2e       	mov	r14, r22
 32e:	08 2f       	mov	r16, r24
	
	MAX7219_Select();
 330:	da df       	rcall	.-76     	; 0x2e6 <MAX7219_Select>
	
	/* NOOP to following ic */
	for(int i = index; i < MAX7219_IC_NUM-1; i++)
 332:	10 e0       	ldi	r17, 0x00	; 0
 334:	e8 01       	movw	r28, r16
 336:	05 c0       	rjmp	.+10     	; 0x342 <MAX7219_Write+0x28>
	{
		MAX7219_Tx(MAX7219_REG_NOOP);
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	dd df       	rcall	.-70     	; 0x2f6 <MAX7219_Tx>
		MAX7219_Tx(MAX7219_REG_NOOP);
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	db df       	rcall	.-74     	; 0x2f6 <MAX7219_Tx>
 340:	21 96       	adiw	r28, 0x01	; 1
	if(index >= MAX7219_IC_NUM) return;
	
	MAX7219_Select();
	
	/* NOOP to following ic */
	for(int i = index; i < MAX7219_IC_NUM-1; i++)
 342:	c7 30       	cpi	r28, 0x07	; 7
 344:	d1 05       	cpc	r29, r1
 346:	c4 f3       	brlt	.-16     	; 0x338 <MAX7219_Write+0x1e>
		MAX7219_Tx(MAX7219_REG_NOOP);
		MAX7219_Tx(MAX7219_REG_NOOP);
	}
	
	/* Write register */
	MAX7219_Tx(reg);
 348:	8e 2d       	mov	r24, r14
 34a:	d5 df       	rcall	.-86     	; 0x2f6 <MAX7219_Tx>
	MAX7219_Tx(data);
 34c:	8f 2d       	mov	r24, r15
 34e:	d3 df       	rcall	.-90     	; 0x2f6 <MAX7219_Tx>
	
	/* NOOP to previous ic */
	for(int i = 0; i < index; i++)
 350:	c0 e0       	ldi	r28, 0x00	; 0
 352:	d0 e0       	ldi	r29, 0x00	; 0
	{
		MAX7219_Tx(MAX7219_REG_NOOP);
 354:	05 c0       	rjmp	.+10     	; 0x360 <MAX7219_Write+0x46>
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	ce df       	rcall	.-100    	; 0x2f6 <MAX7219_Tx>
		MAX7219_Tx(MAX7219_REG_NOOP);
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	cc df       	rcall	.-104    	; 0x2f6 <MAX7219_Tx>
	/* Write register */
	MAX7219_Tx(reg);
	MAX7219_Tx(data);
	
	/* NOOP to previous ic */
	for(int i = 0; i < index; i++)
 35e:	21 96       	adiw	r28, 0x01	; 1
 360:	c0 17       	cp	r28, r16
 362:	d1 07       	cpc	r29, r17
 364:	c4 f3       	brlt	.-16     	; 0x356 <MAX7219_Write+0x3c>
	{
		MAX7219_Tx(MAX7219_REG_NOOP);
		MAX7219_Tx(MAX7219_REG_NOOP);
	}
	
	MAX7219_Deselect();
 366:	c3 df       	rcall	.-122    	; 0x2ee <MAX7219_Deselect>
 368:	df 91       	pop	r29
}
 36a:	cf 91       	pop	r28
 36c:	1f 91       	pop	r17
 36e:	0f 91       	pop	r16
 370:	ff 90       	pop	r15
 372:	ef 90       	pop	r14
 374:	08 95       	ret

00000376 <MAX7219_Digit>:
 376:	88 30       	cpi	r24, 0x08	; 8

void MAX7219_Digit(uint8_t index, uint8_t digit, int8_t value)
{
	if(index >= MAX7219_IC_NUM) return;
 378:	20 f4       	brcc	.+8      	; 0x382 <MAX7219_Digit+0xc>
	if(digit > 0x07) return;
 37a:	68 30       	cpi	r22, 0x08	; 8
 37c:	10 f4       	brcc	.+4      	; 0x382 <MAX7219_Digit+0xc>
	
	MAX7219_Write(index, digit+1, value);
 37e:	6f 5f       	subi	r22, 0xFF	; 255
 380:	cc cf       	rjmp	.-104    	; 0x31a <MAX7219_Write>
 382:	08 95       	ret

00000384 <MAX7219_Decode>:
}

void MAX7219_Decode(uint8_t index, uint8_t value)
{
	if(index >= MAX7219_IC_NUM) return;
 384:	88 30       	cpi	r24, 0x08	; 8
 386:	18 f4       	brcc	.+6      	; 0x38e <MAX7219_Decode+0xa>
 388:	46 2f       	mov	r20, r22
	
	MAX7219_Write(index, MAX7219_REG_DECODE, value);
 38a:	69 e0       	ldi	r22, 0x09	; 9
 38c:	c6 cf       	rjmp	.-116    	; 0x31a <MAX7219_Write>
 38e:	08 95       	ret

00000390 <MAX7219_Intensity>:
}

void MAX7219_Intensity(uint8_t index, uint8_t value)
{
	if(index >= MAX7219_IC_NUM) return;
 390:	88 30       	cpi	r24, 0x08	; 8
 392:	30 f4       	brcc	.+12     	; 0x3a0 <MAX7219_Intensity+0x10>
	if(value > 0x0F) value = 0x0F;
 394:	60 31       	cpi	r22, 0x10	; 16
 396:	08 f0       	brcs	.+2      	; 0x39a <MAX7219_Intensity+0xa>
 398:	6f e0       	ldi	r22, 0x0F	; 15
	
	MAX7219_Write(index, MAX7219_REG_INTENSITY, value);
 39a:	46 2f       	mov	r20, r22
 39c:	6a e0       	ldi	r22, 0x0A	; 10
 39e:	bd cf       	rjmp	.-134    	; 0x31a <MAX7219_Write>
 3a0:	08 95       	ret

000003a2 <MAX7219_ScanLimit>:
}

void MAX7219_ScanLimit(uint8_t index, uint8_t value)
{
	if(index >= MAX7219_IC_NUM) return;
 3a2:	88 30       	cpi	r24, 0x08	; 8
 3a4:	30 f4       	brcc	.+12     	; 0x3b2 <MAX7219_ScanLimit+0x10>
	if(value > 0x07) value = 0x07;
 3a6:	68 30       	cpi	r22, 0x08	; 8
 3a8:	08 f0       	brcs	.+2      	; 0x3ac <MAX7219_ScanLimit+0xa>
 3aa:	67 e0       	ldi	r22, 0x07	; 7
	
	MAX7219_Write(index, MAX7219_REG_SCANLIMIT, value);
 3ac:	46 2f       	mov	r20, r22
 3ae:	6b e0       	ldi	r22, 0x0B	; 11
 3b0:	b4 cf       	rjmp	.-152    	; 0x31a <MAX7219_Write>
 3b2:	08 95       	ret

000003b4 <MAX7219_ShutDown>:
}

void MAX7219_ShutDown(uint8_t index, uint8_t value)
{
	if(index >= MAX7219_IC_NUM) return;
 3b4:	88 30       	cpi	r24, 0x08	; 8
 3b6:	30 f4       	brcc	.+12     	; 0x3c4 <MAX7219_ShutDown+0x10>
	if(value > 0x01) value = 0x01;
 3b8:	62 30       	cpi	r22, 0x02	; 2
 3ba:	08 f0       	brcs	.+2      	; 0x3be <MAX7219_ShutDown+0xa>
 3bc:	61 e0       	ldi	r22, 0x01	; 1
	
	MAX7219_Write(index, MAX7219_REG_SHUTDOWN, value);
 3be:	46 2f       	mov	r20, r22
 3c0:	6c e0       	ldi	r22, 0x0C	; 12
 3c2:	ab cf       	rjmp	.-170    	; 0x31a <MAX7219_Write>
 3c4:	08 95       	ret

000003c6 <MAX7219_Test>:
}

void MAX7219_Test(uint8_t index, uint8_t value)
{
	if(index >= MAX7219_IC_NUM) return;
 3c6:	88 30       	cpi	r24, 0x08	; 8
 3c8:	30 f4       	brcc	.+12     	; 0x3d6 <MAX7219_Test+0x10>
	if(value > 0x01) value = 0x01;
 3ca:	62 30       	cpi	r22, 0x02	; 2
 3cc:	08 f0       	brcs	.+2      	; 0x3d0 <MAX7219_Test+0xa>
 3ce:	61 e0       	ldi	r22, 0x01	; 1
	
	MAX7219_Write(index, MAX7219_REG_TEST, value);
 3d0:	46 2f       	mov	r20, r22
 3d2:	6f e0       	ldi	r22, 0x0F	; 15
 3d4:	a2 cf       	rjmp	.-188    	; 0x31a <MAX7219_Write>
 3d6:	08 95       	ret

000003d8 <__ashrdi3>:
 3d8:	97 fb       	bst	r25, 7
 3da:	10 f8       	bld	r1, 0

000003dc <__lshrdi3>:
 3dc:	16 94       	lsr	r1
 3de:	00 08       	sbc	r0, r0
 3e0:	0f 93       	push	r16
 3e2:	08 30       	cpi	r16, 0x08	; 8
 3e4:	98 f0       	brcs	.+38     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3e6:	08 50       	subi	r16, 0x08	; 8
 3e8:	23 2f       	mov	r18, r19
 3ea:	34 2f       	mov	r19, r20
 3ec:	45 2f       	mov	r20, r21
 3ee:	56 2f       	mov	r21, r22
 3f0:	67 2f       	mov	r22, r23
 3f2:	78 2f       	mov	r23, r24
 3f4:	89 2f       	mov	r24, r25
 3f6:	90 2d       	mov	r25, r0
 3f8:	f4 cf       	rjmp	.-24     	; 0x3e2 <__lshrdi3+0x6>
 3fa:	05 94       	asr	r0
 3fc:	97 95       	ror	r25
 3fe:	87 95       	ror	r24
 400:	77 95       	ror	r23
 402:	67 95       	ror	r22
 404:	57 95       	ror	r21
 406:	47 95       	ror	r20
 408:	37 95       	ror	r19
 40a:	27 95       	ror	r18
 40c:	0a 95       	dec	r16
 40e:	aa f7       	brpl	.-22     	; 0x3fa <__lshrdi3+0x1e>
 410:	0f 91       	pop	r16
 412:	08 95       	ret

00000414 <memcpy_P>:
 414:	fb 01       	movw	r30, r22
 416:	dc 01       	movw	r26, r24
 418:	02 c0       	rjmp	.+4      	; 0x41e <memcpy_P+0xa>
 41a:	05 90       	lpm	r0, Z+
 41c:	0d 92       	st	X+, r0
 41e:	41 50       	subi	r20, 0x01	; 1
 420:	50 40       	sbci	r21, 0x00	; 0
 422:	d8 f7       	brcc	.-10     	; 0x41a <memcpy_P+0x6>
 424:	08 95       	ret

00000426 <_exit>:
 426:	f8 94       	cli

00000428 <__stop_program>:
 428:	ff cf       	rjmp	.-2      	; 0x428 <__stop_program>
