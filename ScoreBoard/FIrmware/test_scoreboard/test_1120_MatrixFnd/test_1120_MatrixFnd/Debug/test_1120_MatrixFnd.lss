
test_1120_MatrixFnd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000034a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  00800100  00800100  000003be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001530  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c30  00000000  00000000  00001a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b01  00000000  00000000  000026b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000274  00000000  00000000  000031b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000067a  00000000  00000000  0000342c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a52  00000000  00000000  00003aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  000044f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 34       	cpi	r26, 0x40	; 64
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	31 d0       	rcall	.+98     	; 0x10c <main>
  aa:	4d c1       	rjmp	.+666    	; 0x346 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <FND_DisplayNumber>:
	}
}

void FND_DisplayNumber(uint8_t index, uint8_t digit, uint8_t number)
{
	if (digit > 7 || number > 9) return; // Validate digit and number range
  ae:	68 30       	cpi	r22, 0x08	; 8
  b0:	18 f4       	brcc	.+6      	; 0xb8 <FND_DisplayNumber+0xa>
  b2:	4a 30       	cpi	r20, 0x0A	; 10
  b4:	08 f4       	brcc	.+2      	; 0xb8 <FND_DisplayNumber+0xa>
	MAX7219_Digit(index, digit, number);
  b6:	ef c0       	rjmp	.+478    	; 0x296 <MAX7219_Digit>
  b8:	08 95       	ret

000000ba <FND_Clear>:
}

void FND_Clear(uint8_t index)
{
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	d8 2f       	mov	r29, r24
	for (uint8_t digit = 0; digit < 8; digit++)
  c0:	c0 e0       	ldi	r28, 0x00	; 0
  c2:	05 c0       	rjmp	.+10     	; 0xce <FND_Clear+0x14>
	{
		MAX7219_Digit(index, digit, 0xF); // Turn off all digits
  c4:	4f e0       	ldi	r20, 0x0F	; 15
  c6:	6c 2f       	mov	r22, r28
  c8:	8d 2f       	mov	r24, r29
  ca:	e5 d0       	rcall	.+458    	; 0x296 <MAX7219_Digit>
	MAX7219_Digit(index, digit, number);
}

void FND_Clear(uint8_t index)
{
	for (uint8_t digit = 0; digit < 8; digit++)
  cc:	cf 5f       	subi	r28, 0xFF	; 255
  ce:	c8 30       	cpi	r28, 0x08	; 8
  d0:	c8 f3       	brcs	.-14     	; 0xc4 <FND_Clear+0xa>
	{
		MAX7219_Digit(index, digit, 0xF); // Turn off all digits
	}
}
  d2:	df 91       	pop	r29
  d4:	cf 91       	pop	r28
  d6:	08 95       	ret

000000d8 <FND_Init>:
﻿// fnd.c
#include "fnd.h"
#include "MAX7219.h"

void FND_Init(void)
{
  d8:	cf 93       	push	r28
	MAX7219_Init();
  da:	a1 d0       	rcall	.+322    	; 0x21e <MAX7219_Init>
	for (uint8_t i = 0; i < MAX7219_IC_NUM; i++)
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	12 c0       	rjmp	.+36     	; 0x104 <FND_Init+0x2c>
	{
		MAX7219_ShutDown(i, 1);      // Turn on the MAX7219
  e0:	61 e0       	ldi	r22, 0x01	; 1
  e2:	8c 2f       	mov	r24, r28
  e4:	f7 d0       	rcall	.+494    	; 0x2d4 <MAX7219_ShutDown>
		MAX7219_Test(i, 0);          // Disable test mode
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	8c 2f       	mov	r24, r28
  ea:	fd d0       	rcall	.+506    	; 0x2e6 <MAX7219_Test>
		MAX7219_Decode(i, 0xFF);     // Enable BCD decoding for all digits
  ec:	6f ef       	ldi	r22, 0xFF	; 255
  ee:	8c 2f       	mov	r24, r28
  f0:	d9 d0       	rcall	.+434    	; 0x2a4 <MAX7219_Decode>
		MAX7219_ScanLimit(i, 7);     // Use all 8 digits
  f2:	67 e0       	ldi	r22, 0x07	; 7
  f4:	8c 2f       	mov	r24, r28
  f6:	e5 d0       	rcall	.+458    	; 0x2c2 <MAX7219_ScanLimit>
		MAX7219_Intensity(i, 1);     // Set default brightness
  f8:	61 e0       	ldi	r22, 0x01	; 1
  fa:	8c 2f       	mov	r24, r28
  fc:	d9 d0       	rcall	.+434    	; 0x2b0 <MAX7219_Intensity>
  fe:	8c 2f       	mov	r24, r28
		FND_Clear(i);                // Clear display
 100:	dc df       	rcall	.-72     	; 0xba <FND_Clear>
 102:	cf 5f       	subi	r28, 0xFF	; 255
 104:	c8 30       	cpi	r28, 0x08	; 8
#include "MAX7219.h"

void FND_Init(void)
{
	MAX7219_Init();
	for (uint8_t i = 0; i < MAX7219_IC_NUM; i++)
 106:	60 f3       	brcs	.-40     	; 0xe0 <FND_Init+0x8>
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <main>:
		MAX7219_Decode(i, 0xFF);     // Enable BCD decoding for all digits
		MAX7219_ScanLimit(i, 7);     // Use all 8 digits
		MAX7219_Intensity(i, 1);     // Set default brightness
		FND_Clear(i);                // Clear display
	}
}
 10c:	35 d0       	rcall	.+106    	; 0x178 <MAX7219_MatrixInit>
 10e:	e4 df       	rcall	.-56     	; 0xd8 <FND_Init>

int main(void)
{
	MAX7219_MatrixInit();
	FND_Init();
	MAX7219_MatrixUpdate();
 110:	53 d0       	rcall	.+166    	; 0x1b8 <MAX7219_MatrixUpdate>
 112:	c0 e0       	ldi	r28, 0x00	; 0
	
	uint8_t number = 0;
 114:	d0 e0       	ldi	r29, 0x00	; 0
		MAX7219_MatrixSetRow64(3, pgm_read_64(&string[3]));
		MAX7219_MatrixUpdate();
		_delay_ms(2000);
		*/
		//=== FND 제어 ===
		for (uint8_t digit = 0; digit < 8; digit++)
 116:	15 c0       	rjmp	.+42     	; 0x142 <main+0x36>
 118:	4c 2f       	mov	r20, r28
		{
			FND_DisplayNumber(0, digit, number); // 첫 번째 FND에서 숫자 표시
 11a:	6d 2f       	mov	r22, r29
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	c7 df       	rcall	.-114    	; 0xae <FND_DisplayNumber>
 120:	8c 2f       	mov	r24, r28
			number = (number + 1) % 10;          // 숫자 증가 (0~9 순환)
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	6a e0       	ldi	r22, 0x0A	; 10
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	e6 d0       	rcall	.+460    	; 0x2f8 <__divmodhi4>
 12c:	c8 2f       	mov	r28, r24
 12e:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	89 e6       	ldi	r24, 0x69	; 105
 132:	98 e1       	ldi	r25, 0x18	; 24
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <main+0x28>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x32>
 13e:	00 00       	nop
		MAX7219_MatrixSetRow64(3, pgm_read_64(&string[3]));
		MAX7219_MatrixUpdate();
		_delay_ms(2000);
		*/
		//=== FND 제어 ===
		for (uint8_t digit = 0; digit < 8; digit++)
 140:	df 5f       	subi	r29, 0xFF	; 255
 142:	d8 30       	cpi	r29, 0x08	; 8
 144:	48 f3       	brcs	.-46     	; 0x118 <main+0xc>
		{
			FND_DisplayNumber(0, digit, number); // 첫 번째 FND에서 숫자 표시
			number = (number + 1) % 10;          // 숫자 증가 (0~9 순환)
			_delay_ms(500);
		}
		FND_Clear(0);  // 첫 번째 FND 클리어
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	b8 df       	rcall	.-144    	; 0xba <FND_Clear>
 14a:	e4 cf       	rjmp	.-56     	; 0x114 <main+0x8>

0000014c <MAX7219_MatrixClear>:
		
		
	}
 14c:	20 e0       	ldi	r18, 0x00	; 0
		lsbD0 = ((FrameBuffer[0][i] & 0x01) << 7);
		FrameBuffer[0][i] = FrameBuffer[0][i] >> 1;
		FrameBuffer[0][i] |= lsbD1;
		FrameBuffer[3][i] |= lsbD0;
	}
}
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	0f c0       	rjmp	.+30     	; 0x170 <MAX7219_MatrixClear+0x24>
 152:	e8 2f       	mov	r30, r24
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	ee 0f       	add	r30, r30
 158:	ff 1f       	adc	r31, r31
 15a:	ee 0f       	add	r30, r30
 15c:	ff 1f       	adc	r31, r31
 15e:	ee 0f       	add	r30, r30
 160:	ff 1f       	adc	r31, r31
 162:	e0 50       	subi	r30, 0x00	; 0
 164:	ff 4f       	sbci	r31, 0xFF	; 255
 166:	e2 0f       	add	r30, r18
 168:	f3 1f       	adc	r31, r19
 16a:	10 82       	st	Z, r1
 16c:	2f 5f       	subi	r18, 0xFF	; 255
 16e:	3f 4f       	sbci	r19, 0xFF	; 255
 170:	28 30       	cpi	r18, 0x08	; 8
 172:	31 05       	cpc	r19, r1
 174:	74 f3       	brlt	.-36     	; 0x152 <MAX7219_MatrixClear+0x6>
 176:	08 95       	ret

00000178 <MAX7219_MatrixInit>:
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	50 d0       	rcall	.+160    	; 0x21e <MAX7219_Init>
 17e:	c0 e0       	ldi	r28, 0x00	; 0
 180:	d0 e0       	ldi	r29, 0x00	; 0
 182:	14 c0       	rjmp	.+40     	; 0x1ac <MAX7219_MatrixInit+0x34>
 184:	8c 2f       	mov	r24, r28
 186:	e2 df       	rcall	.-60     	; 0x14c <MAX7219_MatrixClear>
 188:	61 e0       	ldi	r22, 0x01	; 1
 18a:	8c 2f       	mov	r24, r28
 18c:	a3 d0       	rcall	.+326    	; 0x2d4 <MAX7219_ShutDown>
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	8c 2f       	mov	r24, r28
 192:	a9 d0       	rcall	.+338    	; 0x2e6 <MAX7219_Test>
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	8c 2f       	mov	r24, r28
 198:	85 d0       	rcall	.+266    	; 0x2a4 <MAX7219_Decode>
 19a:	61 e0       	ldi	r22, 0x01	; 1
 19c:	8c 2f       	mov	r24, r28
 19e:	88 d0       	rcall	.+272    	; 0x2b0 <MAX7219_Intensity>
 1a0:	67 e0       	ldi	r22, 0x07	; 7
 1a2:	8c 2f       	mov	r24, r28
 1a4:	8e d0       	rcall	.+284    	; 0x2c2 <MAX7219_ScanLimit>
 1a6:	8c 2f       	mov	r24, r28
 1a8:	d1 df       	rcall	.-94     	; 0x14c <MAX7219_MatrixClear>
 1aa:	21 96       	adiw	r28, 0x01	; 1
 1ac:	c8 30       	cpi	r28, 0x08	; 8
 1ae:	d1 05       	cpc	r29, r1
 1b0:	4c f3       	brlt	.-46     	; 0x184 <MAX7219_MatrixInit+0xc>
 1b2:	df 91       	pop	r29
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <MAX7219_MatrixUpdate>:

void MAX7219_MatrixUpdate()
{
 1b8:	0f 93       	push	r16
 1ba:	1f 93       	push	r17
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
	for(int index = 0; index < MAX7219_IC_NUM; index++)
 1c0:	00 e0       	ldi	r16, 0x00	; 0
 1c2:	10 e0       	ldi	r17, 0x00	; 0
 1c4:	18 c0       	rjmp	.+48     	; 0x1f6 <MAX7219_MatrixUpdate+0x3e>
	{
		for(int digit = 0; digit < 8; digit++)
		{
			uint8_t row = FrameBuffer[index][digit];
 1c6:	f8 01       	movw	r30, r16
 1c8:	ee 0f       	add	r30, r30
 1ca:	ff 1f       	adc	r31, r31
 1cc:	ee 0f       	add	r30, r30
 1ce:	ff 1f       	adc	r31, r31
 1d0:	ee 0f       	add	r30, r30
 1d2:	ff 1f       	adc	r31, r31
 1d4:	e0 50       	subi	r30, 0x00	; 0
 1d6:	ff 4f       	sbci	r31, 0xFF	; 255
 1d8:	ec 0f       	add	r30, r28
 1da:	fd 1f       	adc	r31, r29
 1dc:	40 81       	ld	r20, Z
			MAX7219_Digit(index, digit, row);
 1de:	6c 2f       	mov	r22, r28
 1e0:	80 2f       	mov	r24, r16
 1e2:	59 d0       	rcall	.+178    	; 0x296 <MAX7219_Digit>

void MAX7219_MatrixUpdate()
{
	for(int index = 0; index < MAX7219_IC_NUM; index++)
	{
		for(int digit = 0; digit < 8; digit++)
 1e4:	21 96       	adiw	r28, 0x01	; 1
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <MAX7219_MatrixUpdate+0x34>
 1e8:	c0 e0       	ldi	r28, 0x00	; 0
 1ea:	d0 e0       	ldi	r29, 0x00	; 0
 1ec:	c8 30       	cpi	r28, 0x08	; 8
 1ee:	d1 05       	cpc	r29, r1
 1f0:	54 f3       	brlt	.-44     	; 0x1c6 <MAX7219_MatrixUpdate+0xe>
	}
}

void MAX7219_MatrixUpdate()
{
	for(int index = 0; index < MAX7219_IC_NUM; index++)
 1f2:	0f 5f       	subi	r16, 0xFF	; 255
 1f4:	1f 4f       	sbci	r17, 0xFF	; 255
 1f6:	08 30       	cpi	r16, 0x08	; 8
 1f8:	11 05       	cpc	r17, r1
 1fa:	b4 f3       	brlt	.-20     	; 0x1e8 <MAX7219_MatrixUpdate+0x30>
		{
			uint8_t row = FrameBuffer[index][digit];
			MAX7219_Digit(index, digit, row);
		}
	}
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	1f 91       	pop	r17
 202:	0f 91       	pop	r16
 204:	08 95       	ret

00000206 <MAX7219_Select>:
	SPCR |= (_BV(MSTR) | _BV(SPE));
}

static void MAX7219_Select()
{
	MAX7219_PORT &= ~_BV(MAX7219_LOAD);
 206:	88 b3       	in	r24, 0x18	; 24
 208:	8e 7f       	andi	r24, 0xFE	; 254
 20a:	88 bb       	out	0x18, r24	; 24
 20c:	08 95       	ret

0000020e <MAX7219_Deselect>:
}

static void MAX7219_Deselect()
{
	MAX7219_PORT |= _BV(MAX7219_LOAD);
 20e:	88 b3       	in	r24, 0x18	; 24
 210:	81 60       	ori	r24, 0x01	; 1
 212:	88 bb       	out	0x18, r24	; 24
 214:	08 95       	ret

00000216 <MAX7219_Tx>:
}

static void MAX7219_Tx(uint8_t data)
{
	SPDR = data;
 216:	8f b9       	out	0x0f, r24	; 15
	loop_until_bit_is_set(SPSR, SPIF);
 218:	77 9b       	sbis	0x0e, 7	; 14
 21a:	fe cf       	rjmp	.-4      	; 0x218 <MAX7219_Tx+0x2>
}
 21c:	08 95       	ret

0000021e <MAX7219_Init>:
static void MAX7219_Tx(uint8_t data);

void MAX7219_Init()
{
	/* SPI MOSI, SCK, SS Output */
	MAX7219_DDR |= _BV(MAX7219_DIN) | _BV(MAX7219_CLK) | _BV(MAX7219_LOAD);
 21e:	87 b3       	in	r24, 0x17	; 23
 220:	87 60       	ori	r24, 0x07	; 7
 222:	87 bb       	out	0x17, r24	; 23
	
	/* Deselect SS */
	MAX7219_Deselect();
 224:	f4 df       	rcall	.-24     	; 0x20e <MAX7219_Deselect>
	
	/* MISO Input + Pullup */
	MAX7219_DDR &= ~_BV(MAX7219_MISO);
 226:	87 b3       	in	r24, 0x17	; 23
 228:	8f 77       	andi	r24, 0x7F	; 127
 22a:	87 bb       	out	0x17, r24	; 23
	MAX7219_PORT |= _BV(MAX7219_MISO);
 22c:	88 b3       	in	r24, 0x18	; 24
 22e:	80 68       	ori	r24, 0x80	; 128
 230:	88 bb       	out	0x18, r24	; 24
	
	/* Master mode + Enable, F_CPU/4 =  4MHz */
	SPCR |= (_BV(MSTR) | _BV(SPE));
 232:	8d b1       	in	r24, 0x0d	; 13
 234:	80 65       	ori	r24, 0x50	; 80
 236:	8d b9       	out	0x0d, r24	; 13
 238:	08 95       	ret

0000023a <MAX7219_Write>:
	SPDR = data;
	loop_until_bit_is_set(SPSR, SPIF);
}

void MAX7219_Write(uint8_t index, uint8_t reg, uint8_t data)
{
 23a:	ef 92       	push	r14
 23c:	ff 92       	push	r15
 23e:	0f 93       	push	r16
 240:	1f 93       	push	r17
 242:	cf 93       	push	r28
 244:	df 93       	push	r29
	if(index >= MAX7219_IC_NUM) return;
 246:	88 30       	cpi	r24, 0x08	; 8
 248:	f8 f4       	brcc	.+62     	; 0x288 <MAX7219_Write+0x4e>
 24a:	f4 2e       	mov	r15, r20
 24c:	e6 2e       	mov	r14, r22
 24e:	08 2f       	mov	r16, r24
	
	MAX7219_Select();
 250:	da df       	rcall	.-76     	; 0x206 <MAX7219_Select>
	
	/* NOOP to following ic */
	for(int i = index; i < MAX7219_IC_NUM-1; i++)
 252:	10 e0       	ldi	r17, 0x00	; 0
 254:	e8 01       	movw	r28, r16
 256:	05 c0       	rjmp	.+10     	; 0x262 <MAX7219_Write+0x28>
	{
		MAX7219_Tx(MAX7219_REG_NOOP);
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	dd df       	rcall	.-70     	; 0x216 <MAX7219_Tx>
		MAX7219_Tx(MAX7219_REG_NOOP);
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	db df       	rcall	.-74     	; 0x216 <MAX7219_Tx>
 260:	21 96       	adiw	r28, 0x01	; 1
	if(index >= MAX7219_IC_NUM) return;
	
	MAX7219_Select();
	
	/* NOOP to following ic */
	for(int i = index; i < MAX7219_IC_NUM-1; i++)
 262:	c7 30       	cpi	r28, 0x07	; 7
 264:	d1 05       	cpc	r29, r1
 266:	c4 f3       	brlt	.-16     	; 0x258 <MAX7219_Write+0x1e>
		MAX7219_Tx(MAX7219_REG_NOOP);
		MAX7219_Tx(MAX7219_REG_NOOP);
	}
	
	/* Write register */
	MAX7219_Tx(reg);
 268:	8e 2d       	mov	r24, r14
 26a:	d5 df       	rcall	.-86     	; 0x216 <MAX7219_Tx>
	MAX7219_Tx(data);
 26c:	8f 2d       	mov	r24, r15
 26e:	d3 df       	rcall	.-90     	; 0x216 <MAX7219_Tx>
	
	/* NOOP to previous ic */
	for(int i = 0; i < index; i++)
 270:	c0 e0       	ldi	r28, 0x00	; 0
 272:	d0 e0       	ldi	r29, 0x00	; 0
	{
		MAX7219_Tx(MAX7219_REG_NOOP);
 274:	05 c0       	rjmp	.+10     	; 0x280 <MAX7219_Write+0x46>
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	ce df       	rcall	.-100    	; 0x216 <MAX7219_Tx>
		MAX7219_Tx(MAX7219_REG_NOOP);
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	cc df       	rcall	.-104    	; 0x216 <MAX7219_Tx>
	/* Write register */
	MAX7219_Tx(reg);
	MAX7219_Tx(data);
	
	/* NOOP to previous ic */
	for(int i = 0; i < index; i++)
 27e:	21 96       	adiw	r28, 0x01	; 1
 280:	c0 17       	cp	r28, r16
 282:	d1 07       	cpc	r29, r17
 284:	c4 f3       	brlt	.-16     	; 0x276 <MAX7219_Write+0x3c>
	{
		MAX7219_Tx(MAX7219_REG_NOOP);
		MAX7219_Tx(MAX7219_REG_NOOP);
	}
	
	MAX7219_Deselect();
 286:	c3 df       	rcall	.-122    	; 0x20e <MAX7219_Deselect>
 288:	df 91       	pop	r29
}
 28a:	cf 91       	pop	r28
 28c:	1f 91       	pop	r17
 28e:	0f 91       	pop	r16
 290:	ff 90       	pop	r15
 292:	ef 90       	pop	r14
 294:	08 95       	ret

00000296 <MAX7219_Digit>:
 296:	88 30       	cpi	r24, 0x08	; 8

void MAX7219_Digit(uint8_t index, uint8_t digit, int8_t value)
{
	if(index >= MAX7219_IC_NUM) return;
 298:	20 f4       	brcc	.+8      	; 0x2a2 <MAX7219_Digit+0xc>
	if(digit > 0x07) return;
 29a:	68 30       	cpi	r22, 0x08	; 8
 29c:	10 f4       	brcc	.+4      	; 0x2a2 <MAX7219_Digit+0xc>
	
	MAX7219_Write(index, digit+1, value);
 29e:	6f 5f       	subi	r22, 0xFF	; 255
 2a0:	cc cf       	rjmp	.-104    	; 0x23a <MAX7219_Write>
 2a2:	08 95       	ret

000002a4 <MAX7219_Decode>:
}

void MAX7219_Decode(uint8_t index, uint8_t value)
{
	if(index >= MAX7219_IC_NUM) return;
 2a4:	88 30       	cpi	r24, 0x08	; 8
 2a6:	18 f4       	brcc	.+6      	; 0x2ae <MAX7219_Decode+0xa>
 2a8:	46 2f       	mov	r20, r22
	
	MAX7219_Write(index, MAX7219_REG_DECODE, value);
 2aa:	69 e0       	ldi	r22, 0x09	; 9
 2ac:	c6 cf       	rjmp	.-116    	; 0x23a <MAX7219_Write>
 2ae:	08 95       	ret

000002b0 <MAX7219_Intensity>:
}

void MAX7219_Intensity(uint8_t index, uint8_t value)
{
	if(index >= MAX7219_IC_NUM) return;
 2b0:	88 30       	cpi	r24, 0x08	; 8
 2b2:	30 f4       	brcc	.+12     	; 0x2c0 <MAX7219_Intensity+0x10>
	if(value > 0x0F) value = 0x0F;
 2b4:	60 31       	cpi	r22, 0x10	; 16
 2b6:	08 f0       	brcs	.+2      	; 0x2ba <MAX7219_Intensity+0xa>
 2b8:	6f e0       	ldi	r22, 0x0F	; 15
	
	MAX7219_Write(index, MAX7219_REG_INTENSITY, value);
 2ba:	46 2f       	mov	r20, r22
 2bc:	6a e0       	ldi	r22, 0x0A	; 10
 2be:	bd cf       	rjmp	.-134    	; 0x23a <MAX7219_Write>
 2c0:	08 95       	ret

000002c2 <MAX7219_ScanLimit>:
}

void MAX7219_ScanLimit(uint8_t index, uint8_t value)
{
	if(index >= MAX7219_IC_NUM) return;
 2c2:	88 30       	cpi	r24, 0x08	; 8
 2c4:	30 f4       	brcc	.+12     	; 0x2d2 <MAX7219_ScanLimit+0x10>
	if(value > 0x07) value = 0x07;
 2c6:	68 30       	cpi	r22, 0x08	; 8
 2c8:	08 f0       	brcs	.+2      	; 0x2cc <MAX7219_ScanLimit+0xa>
 2ca:	67 e0       	ldi	r22, 0x07	; 7
	
	MAX7219_Write(index, MAX7219_REG_SCANLIMIT, value);
 2cc:	46 2f       	mov	r20, r22
 2ce:	6b e0       	ldi	r22, 0x0B	; 11
 2d0:	b4 cf       	rjmp	.-152    	; 0x23a <MAX7219_Write>
 2d2:	08 95       	ret

000002d4 <MAX7219_ShutDown>:
}

void MAX7219_ShutDown(uint8_t index, uint8_t value)
{
	if(index >= MAX7219_IC_NUM) return;
 2d4:	88 30       	cpi	r24, 0x08	; 8
 2d6:	30 f4       	brcc	.+12     	; 0x2e4 <MAX7219_ShutDown+0x10>
	if(value > 0x01) value = 0x01;
 2d8:	62 30       	cpi	r22, 0x02	; 2
 2da:	08 f0       	brcs	.+2      	; 0x2de <MAX7219_ShutDown+0xa>
 2dc:	61 e0       	ldi	r22, 0x01	; 1
	
	MAX7219_Write(index, MAX7219_REG_SHUTDOWN, value);
 2de:	46 2f       	mov	r20, r22
 2e0:	6c e0       	ldi	r22, 0x0C	; 12
 2e2:	ab cf       	rjmp	.-170    	; 0x23a <MAX7219_Write>
 2e4:	08 95       	ret

000002e6 <MAX7219_Test>:
}

void MAX7219_Test(uint8_t index, uint8_t value)
{
	if(index >= MAX7219_IC_NUM) return;
 2e6:	88 30       	cpi	r24, 0x08	; 8
 2e8:	30 f4       	brcc	.+12     	; 0x2f6 <MAX7219_Test+0x10>
	if(value > 0x01) value = 0x01;
 2ea:	62 30       	cpi	r22, 0x02	; 2
 2ec:	08 f0       	brcs	.+2      	; 0x2f0 <MAX7219_Test+0xa>
 2ee:	61 e0       	ldi	r22, 0x01	; 1
	
	MAX7219_Write(index, MAX7219_REG_TEST, value);
 2f0:	46 2f       	mov	r20, r22
 2f2:	6f e0       	ldi	r22, 0x0F	; 15
 2f4:	a2 cf       	rjmp	.-188    	; 0x23a <MAX7219_Write>
 2f6:	08 95       	ret

000002f8 <__divmodhi4>:
 2f8:	97 fb       	bst	r25, 7
 2fa:	07 2e       	mov	r0, r23
 2fc:	16 f4       	brtc	.+4      	; 0x302 <__divmodhi4+0xa>
 2fe:	00 94       	com	r0
 300:	06 d0       	rcall	.+12     	; 0x30e <__divmodhi4_neg1>
 302:	77 fd       	sbrc	r23, 7
 304:	08 d0       	rcall	.+16     	; 0x316 <__divmodhi4_neg2>
 306:	0b d0       	rcall	.+22     	; 0x31e <__udivmodhi4>
 308:	07 fc       	sbrc	r0, 7
 30a:	05 d0       	rcall	.+10     	; 0x316 <__divmodhi4_neg2>
 30c:	3e f4       	brtc	.+14     	; 0x31c <__divmodhi4_exit>

0000030e <__divmodhi4_neg1>:
 30e:	90 95       	com	r25
 310:	81 95       	neg	r24
 312:	9f 4f       	sbci	r25, 0xFF	; 255
 314:	08 95       	ret

00000316 <__divmodhi4_neg2>:
 316:	70 95       	com	r23
 318:	61 95       	neg	r22
 31a:	7f 4f       	sbci	r23, 0xFF	; 255

0000031c <__divmodhi4_exit>:
 31c:	08 95       	ret

0000031e <__udivmodhi4>:
 31e:	aa 1b       	sub	r26, r26
 320:	bb 1b       	sub	r27, r27
 322:	51 e1       	ldi	r21, 0x11	; 17
 324:	07 c0       	rjmp	.+14     	; 0x334 <__udivmodhi4_ep>

00000326 <__udivmodhi4_loop>:
 326:	aa 1f       	adc	r26, r26
 328:	bb 1f       	adc	r27, r27
 32a:	a6 17       	cp	r26, r22
 32c:	b7 07       	cpc	r27, r23
 32e:	10 f0       	brcs	.+4      	; 0x334 <__udivmodhi4_ep>
 330:	a6 1b       	sub	r26, r22
 332:	b7 0b       	sbc	r27, r23

00000334 <__udivmodhi4_ep>:
 334:	88 1f       	adc	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	5a 95       	dec	r21
 33a:	a9 f7       	brne	.-22     	; 0x326 <__udivmodhi4_loop>
 33c:	80 95       	com	r24
 33e:	90 95       	com	r25
 340:	bc 01       	movw	r22, r24
 342:	cd 01       	movw	r24, r26
 344:	08 95       	ret

00000346 <_exit>:
 346:	f8 94       	cli

00000348 <__stop_program>:
 348:	ff cf       	rjmp	.-2      	; 0x348 <__stop_program>
